#![allow(unused)]
/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ToyArrVal {
    pub value: i64,
    pub type_: u8,
    pub _pad: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ToyArrVal"][::std::mem::size_of::<ToyArrVal>() - 16usize];
    ["Alignment of ToyArrVal"][::std::mem::align_of::<ToyArrVal>() - 8usize];
    ["Offset of field: ToyArrVal::value"][::std::mem::offset_of!(ToyArrVal, value) - 0usize];
    ["Offset of field: ToyArrVal::type_"][::std::mem::offset_of!(ToyArrVal, type_) - 8usize];
    ["Offset of field: ToyArrVal::_pad"][::std::mem::offset_of!(ToyArrVal, _pad) - 9usize];
};
unsafe extern "C" {
    pub fn toy_print(input: i64, datatype: i64);
}
unsafe extern "C" {
    pub fn toy_println(input: i64, datatype: i64);
}
unsafe extern "C" {
    pub fn toy_malloc(ptr: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_concat(sp1: i64, sp2: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_strequal(sp1: i64, sp2: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_strlen(sp1: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_type_to_str(val: i64, type_: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_type_to_bool(val: i64, type_: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_type_to_int(val: i64, type_: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_type_to_float(val: i64, type_: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_int_to_float(i: i64) -> f64;
}
unsafe extern "C" {
    pub fn toy_float_bits_to_double(f_bits: i64) -> f64;
}
unsafe extern "C" {
    pub fn toy_double_to_float_bits(d: f64) -> i64;
}
unsafe extern "C" {
    pub fn toy_malloc_arr(len: i64, type_: i64) -> i64;
}
unsafe extern "C" {
    pub fn toy_write_to_arr(arr_in_ptr: i64, value: i64, idx: i64, type_: i64);
}
unsafe extern "C" {
    pub fn toy_read_from_arr(arr_in_ptr: i64, idx: i64) -> i64;
}
